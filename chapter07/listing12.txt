object Counter6 {

  import scala.actors._
  import scala.actors.Actor._

  case object Increment
  case object Stop

  class SharedCounter(i: Int) extends Actor {
    import scala.actors.scheduler.SingleThreadedScheduler
    override def scheduler = new SingleThreadedScheduler
    def act() = act(0)
    def act(count: Int) {
      react {
        case Increment => {
          println("Actor "+i+": "+Thread.currentThread)
          act(count+1)
        }
        case Stop =>
      }
    }
  }

  def main(args: Array[String]) {

    val counters = for (i <- 0 to 9)
      yield new SharedCounter(i)
    for (i <- 0 to 9) counters(i).start()
    for (i <- 0 to 9) counters(i) ! Increment
    for (i <- 0 to 9) counters(i) ! Increment
    Thread.sleep(1000)
    for (i <- 0 to 9) counters(i) ! Stop

  }
}
