object FutureCounter {

  import scala.actors._
  import scala.actors.Actor._

  case object Increment
  case object Value
  case object Stop

  object SharedCounter extends Actor {
    private[this] var count = 0
    def act() {
      var continue = true
      while (continue) {
        receive {
          case Increment => count+=1
          case Value => {
            println("SharedCounter is sleeping")
            Thread.sleep(1000)
            println("SharedCounter is awake")
            sender ! count
          }
          case Stop => continue = false
        }
      }
    }
  }

  def main(args: Array[String]) {

    SharedCounter.start()
    SharedCounter ! Increment
    SharedCounter ! Increment
    val value = SharedCounter !! Value
    println("Value-request sent")
    println("Value = "+value)
    println("Value = "+value())
    SharedCounter ! Stop

  }
}
